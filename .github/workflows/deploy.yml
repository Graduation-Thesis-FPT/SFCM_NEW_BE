name: Deploy SFCM_FE

on:
  push:
    branches:
      - master
  pull_request:
    types:
      - closed
    branches:
      - master

concurrency:
  group: deployment
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Notify Discord Deployment Start
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          curl -H "Content-Type: application/json" -X POST -d '{"content":"üöÄ Starting deployment..."}' $DISCORD_WEBHOOK_URL

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install SSHPass
        run: sudo apt-get install -y sshpass

      - name: Deploy to VPS
        env:
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_IP: ${{ secrets.VPS_IP }}
          VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
          SFCM_FE_ENV: ${{ secrets.SFCM_FE_ENV }}
          SFCM_NEW_BE_ENV: ${{ secrets.SFCM_NEW_BE_ENV }}
        run: |
          sshpass -p $VPS_PASSWORD ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_IP 'bash -s' <<EOF
            export SFCM_FE_ENV="$SFCM_FE_ENV"
            export SFCM_NEW_BE_ENV="$SFCM_NEW_BE_ENV"
            export DISCORD_WEBHOOK_URL="$DISCORD_WEBHOOK_URL"
            
            # Create the directory if it doesn't exist
            mkdir -p /root/capstone-new
            cd /root/capstone-new

            # Clone or pull the SFCM_FE repository
            if [ ! -d "SFCM_FE" ]; then
              git clone git@github.com:Graduation-Thesis-FPT/SFCM_FE.git
            else
              cd SFCM_FE
              git checkout master
              git reset --hard
              git clean -fd
              git pull
              cd ..
            fi

            # Clone or pull the SFCM_NEW_BE repository
            if [ ! -d "SFCM_NEW_BE" ]; then
              git clone git@github.com:Graduation-Thesis-FPT/SFCM_NEW_BE.git
            else
              cd SFCM_NEW_BE
              git checkout master
              git reset --hard
              git clean -fd
              git pull
              cd ..
            fi

            # Write .env files to the respective directories
            echo "$SFCM_FE_ENV" > /root/capstone-new/SFCM_FE/.env
            echo "$SFCM_NEW_BE_ENV" > /root/capstone-new/SFCM_NEW_BE/.env

            # Print environment variables for debugging
            echo "SFCM_FE_ENV: $SFCM_FE_ENV"
            echo "SFCM_NEW_BE_ENV: $SFCM_NEW_BE_ENV"

            # Ensure deploy scripts have executable permissions
            chmod +x /root/capstone-new/SFCM_FE/deployment/deploy-db.sh
            chmod +x /root/capstone-new/SFCM_FE/deployment/deploy.sh

            # Check if SQL Server Docker container is running
            container_id=$(docker ps -q -f name=sfcm-db)
            echo "SQL Server Docker container ID: $container_id"

            # Run the deploy script
            /root/capstone-new/SFCM_FE/deployment/deploy-db.sh
            /root/capstone-new/SFCM_FE/deployment/deploy.sh

            # Check if all required containers are running
            missing_containers=""
            for container in sfcm-db sfcm-fe sfcm-be; do
              if [ "$(docker ps -q -f name=$container)" == "" ]; then
                missing_containers="$missing_containers $container"
              fi
            done

            if [ "$missing_containers" != "" ]; then
              echo "The following containers are not running: $missing_containers"
              exit 1
            fi
          EOF

      - name: Notify Discord Deployment Success
        if: success()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          curl -H "Content-Type: application/json" -X POST -d '{"content":"‚úÖ Deployment completed successfully!"}' $DISCORD_WEBHOOK_URL

      - name: Notify Discord Deployment Failed
        if: failure()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          curl -H "Content-Type: application/json" -X POST -d '{"content":"‚ùå Deployment failed! Missing containers: $(docker ps --format "{{.Names}}" --filter "status=exited")"}' $DISCORD_WEBHOOK_URL
