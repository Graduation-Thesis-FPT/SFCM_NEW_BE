name: Deploy

on:
  push:
    branches:
      - master
  pull_request:
    types:
      - closed
    branches:
      - master

concurrency:
  group: deployment
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Set Deployment Variables
        id: vars
        run: |
          echo "REPO_NAME=${{ github.repository }}" >> $GITHUB_ENV
          echo "COMMIT_HASH=${{ github.sha }}" >> $GITHUB_ENV
          echo "DEPLOY_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV
          echo "BRANCH_NAME=${{ github.ref }}" >> $GITHUB_ENV

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass jq

      - name: Notify Discord Deployment Start
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          PAYLOAD=$(jq -n \
            --arg title "üöÄ Deployment Started" \
            --arg color "3066993" \
            --arg repo "${{ env.REPO_NAME }}" \
            --arg branch "${{ env.BRANCH_NAME }}" \
            --arg commit "${{ env.COMMIT_HASH }}" \
            --arg time "${{ env.DEPLOY_TIME }}" \
            --arg timestamp "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
            '{
              embeds: [{
                title: $title,
                color: ($color | tonumber),
                fields: [
                  { name: "Repository", value: $repo, inline: true },
                  { name: "Branch", value: $branch, inline: true },
                  { name: "Commit", value: "https://github.com/\($repo)/commit/\($commit)", inline: false },
                  { name: "Time", value: "`\($time)`", inline: false }
                ],
                timestamp: $timestamp,
                footer: { text: "Deployment System" }
              }]
            }'
          )
          curl -H "Content-Type: application/json" -X POST -d "$PAYLOAD" $DISCORD_WEBHOOK_URL

      - name: Deploy to VPS
        env:
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_IP: ${{ secrets.VPS_IP }}
          VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
          SFCM_FE_ENV: ${{ secrets.SFCM_FE_ENV }}
          SFCM_NEW_BE_ENV: ${{ secrets.SFCM_NEW_BE_ENV }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          REPO_NAME: ${{ github.repository }}
          COMMIT_HASH: ${{ github.sha }}
          BRANCH_NAME: ${{ github.ref }}
          DEPLOY_TIME: ${{ env.DEPLOY_TIME }}
        run: |
          sshpass -p $VPS_PASSWORD ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_IP 'bash -s' <<EOF
            export SFCM_FE_ENV="$SFCM_FE_ENV"
            export SFCM_NEW_BE_ENV="$SFCM_NEW_BE_ENV"
            export DISCORD_WEBHOOK_URL="$DISCORD_WEBHOOK_URL"
            export REPO_NAME="$REPO_NAME"
            export COMMIT_HASH="$COMMIT_HASH"
            export BRANCH_NAME="$BRANCH_NAME"
            export DEPLOY_TIME="$DEPLOY_TIME"
            
            # Create the directory if it doesn't exist
            mkdir -p /root/capstone-new
            cd /root/capstone-new

            # Clone or pull the SFCM_FE repository
            if [ ! -d "SFCM_FE" ]; then
              git clone git@github.com:Graduation-Thesis-FPT/SFCM_FE.git
            else
              cd SFCM_FE
              git checkout master
              git reset --hard
              git clean -fd
              git pull
              cd ..
            fi

            # Clone or pull the SFCM_NEW_BE repository
            if [ ! -d "SFCM_NEW_BE" ]; then
              git clone git@github.com:Graduation-Thesis-FPT/SFCM_NEW_BE.git
            else
              cd SFCM_NEW_BE
              git checkout master
              git reset --hard
              git clean -fd
              git pull
              cd ..
            fi

            # Write .env files to the respective directories
            echo "$SFCM_FE_ENV" > /root/capstone-new/SFCM_FE/.env
            echo "$SFCM_NEW_BE_ENV" > /root/capstone-new/SFCM_NEW_BE/.env

            # Print environment variables for debugging
            echo "SFCM_FE_ENV: $SFCM_FE_ENV"
            echo "SFCM_NEW_BE_ENV: $SFCM_NEW_BE_ENV"

            # Ensure deploy scripts have executable permissions
            chmod +x /root/capstone-new/SFCM_FE/deployment/deploy-db.sh
            chmod +x /root/capstone-new/SFCM_FE/deployment/deploy.sh

            # Run the deploy script
            /root/capstone-new/SFCM_FE/deployment/deploy-db.sh
            /root/capstone-new/SFCM_FE/deployment/deploy.sh

            # Check if all required containers are running
            missing_containers=""
            for container in sfcm-db sfcm-fe sfcm-be; do
              if [ "$(docker ps -q -f name=$container)" == "" ]; then
                missing_containers="$missing_containers $container"
              fi
            done

            if [ "$missing_containers" != "" ]; then
              echo "The following containers are not running: $missing_containers"
              exit 1
            fi
          EOF

      - name: Notify Discord Deployment Success
        if: success()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          PAYLOAD=$(jq -n \
            --arg title "‚úÖ Deployment Successful" \
            --arg color "3066993" \
            --arg repo "${{ env.REPO_NAME }}" \
            --arg branch "${{ env.BRANCH_NAME }}" \
            --arg commit "${{ env.COMMIT_HASH }}" \
            --arg time "${{ env.DEPLOY_TIME }}" \
            --arg timestamp "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
            '{
              embeds: [{
                title: $title,
                color: ($color | tonumber),
                fields: [
                  { name: "Repository", value: $repo, inline: true },
                  { name: "Branch", value: $branch, inline: true },
                  { name: "Commit", value: "https://github.com/\($repo)/commit/\($commit)", inline: false },
                  { name: "Time", value: "`\($time)`", inline: false }
                ],
                timestamp: $timestamp,
                footer: { text: "Deployment System" }
              }]
            }'
          )
          curl -H "Content-Type: application/json" -X POST -d "$PAYLOAD" $DISCORD_WEBHOOK_URL

      - name: Notify Discord Deployment Failed
        if: failure()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          MISSING_CONTAINERS=$(docker ps --format "{{.Names}}" --filter "status=exited" | paste -sd ", " -)
          PAYLOAD=$(jq -n \
            --arg title "‚ùå Deployment Failed" \
            --arg color "15158332" \
            --arg repo "${{ env.REPO_NAME }}" \
            --arg branch "${{ env.BRANCH_NAME }}" \
            --arg commit "${{ env.COMMIT_HASH }}" \
            --arg time "${{ env.DEPLOY_TIME }}" \
            --arg error "Missing containers: \`${MISSING_CONTAINERS}\`" \
            --arg timestamp "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
            '{
              embeds: [{
                title: $title,
                color: ($color | tonumber),
                fields: [
                  { name: "Repository", value: $repo, inline: true },
                  { name: "Branch", value: $branch, inline: true },
                  { name: "Commit", value: "https://github.com/\($repo)/commit/\($commit)", inline: false },
                  { name: "Time", value: "`\($time)`", inline: false },
                  { name: "Error", value: $error, inline: false }
                ],
                timestamp: $timestamp,
                footer: { text: "Deployment System" }
              }]
            }'
          )
          curl -H "Content-Type: application/json" -X POST -d "$PAYLOAD" $DISCORD_WEBHOOK_URL

      - name: Notify Discord Deployment Cancelled
        if: cancelled()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          PAYLOAD=$(jq -n \
            --arg title "‚ö†Ô∏è Deployment Cancelled" \
            --arg color "15105570" \
            --arg repo "${{ env.REPO_NAME }}" \
            --arg branch "${{ env.BRANCH_NAME }}" \
            --arg commit "${{ env.COMMIT_HASH }}" \
            --arg time "${{ env.DEPLOY_TIME }}" \
            --arg timestamp "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
            '{
              embeds: [{
                title: $title,
                color: ($color | tonumber),
                fields: [
                  { name: "Repository", value: $repo, inline: true },
                  { name: "Branch", value: $branch, inline: true },
                  { name: "Commit", value: "https://github.com/\($repo)/commit/\($commit)", inline: false },
                  { name: "Time", value: "`\($time)`", inline: false }
                ],
                timestamp: $timestamp,
                footer: { text: "Deployment System" }
              }]
            }'
          )
          curl -H "Content-Type: application/json" -X POST -d "$PAYLOAD" $DISCORD_WEBHOOK_URL
