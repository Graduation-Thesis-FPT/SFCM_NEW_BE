name: Deploy

on:
  push:
    branches:
      - master

concurrency:
  group: deployment
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Set Deployment Variables
        id: vars
        run: |
          echo "REPO_NAME=${{ github.repository }}" >> $GITHUB_ENV
          echo "COMMIT_HASH=${{ github.sha }}" >> $GITHUB_ENV
          echo "DEPLOY_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV
          echo "ACTOR=${{ github.actor }}" >> $GITHUB_ENV
          echo "ACTOR_AVATAR_URL=https://avatars.githubusercontent.com/u/${{ github.actor_id }}" >> $GITHUB_ENV

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get install -y sshpass jq curl

      - name: Deploy to VPS
        env:
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_IP: ${{ secrets.VPS_IP }}
          VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
          SFCM_FE_ENV: ${{ secrets.SFCM_FE_ENV }}
          SFCM_NEW_BE_ENV: ${{ secrets.SFCM_NEW_BE_ENV }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          REPO_NAME: ${{ env.REPO_NAME }}
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
          DEPLOY_TIME: ${{ env.DEPLOY_TIME }}
          ACTOR: ${{ env.ACTOR }}
          ACTOR_AVATAR_URL: ${{ env.ACTOR_AVATAR_URL }}
        run: |
          sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no "$VPS_USER@$VPS_IP" 'bash -s' <<EOF
            export SFCM_FE_ENV="$SFCM_FE_ENV"
            export SFCM_NEW_BE_ENV="$SFCM_NEW_BE_ENV"
            export DISCORD_WEBHOOK_URL="$DISCORD_WEBHOOK_URL"
            export REPO_NAME="$REPO_NAME"
            export COMMIT_HASH="$COMMIT_HASH"
            export DEPLOY_TIME="$DEPLOY_TIME"
            export ACTOR="$ACTOR"
            export ACTOR_AVATAR_URL="$ACTOR_AVATAR_URL"
            
            # Create the directory if it doesn't exist
            mkdir -p /root/capstone-new
            cd /root/capstone-new

            # Clone or pull the SFCM_FE repository
            if [ ! -d "SFCM_FE" ]; then
              git clone git@github.com:Graduation-Thesis-FPT/SFCM_FE.git
            else
              cd SFCM_FE
              git checkout master
              git reset --hard
              git clean -fd
              git pull
              cd ..
            fi

            # Clone or pull the SFCM_NEW_BE repository
            if [ ! -d "SFCM_NEW_BE" ]; then
              git clone git@github.com:Graduation-Thesis-FPT/SFCM_NEW_BE.git
            else
              cd SFCM_NEW_BE
              git checkout master
              git reset --hard
              git clean -fd
              git pull
              cd ..
            fi

            # Write .env files to the respective directories
            echo "$SFCM_FE_ENV" > /root/capstone-new/SFCM_FE/.env
            echo "$SFCM_NEW_BE_ENV" > /root/capstone-new/SFCM_NEW_BE/.env

            # Print environment variables for debugging
            echo "SFCM_FE_ENV: $SFCM_FE_ENV"
            echo "SFCM_NEW_BE_ENV: $SFCM_NEW_BE_ENV"

            # Ensure deploy scripts have executable permissions
            chmod +x /root/capstone-new/SFCM_FE/deployment/deploy-db.sh
            chmod +x /root/capstone-new/SFCM_FE/deployment/deploy.sh

            # Run the deploy scripts
            /root/capstone-new/SFCM_FE/deployment/deploy-db.sh
            /root/capstone-new/SFCM_FE/deployment/deploy.sh
          EOF

      - name: Healthcheck
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          ACTOR: ${{ env.ACTOR }}
          ACTOR_AVATAR_URL: ${{ env.ACTOR_AVATAR_URL }}
          REPO_NAME: ${{ env.REPO_NAME }}
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
          DEPLOY_TIME: ${{ env.DEPLOY_TIME }}
        run: |
          # Perform healthcheck
          response=$(curl --retry 10 --retry-delay 10 -s https://sfcm.id.vn/api/v1/health)
          echo "Healthcheck response: $response"

          response_last_line=$(echo "$response" | tail -n 1)

          # Check if the response is not "OK"
          if [ "$response_last_line" != "OK" ]; then
            echo "Healthcheck failed. Sending Discord notification..."

            # Define notification details
            title="Healthcheck Failed"
            color=15158332  # Red color
            additional="Healthcheck response from the backend: \`$response\`"
            timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

            # Create JSON payload using jq
            payload=$(jq -n \
              --arg name "$ACTOR" \
              --arg icon_url "$ACTOR_AVATAR_URL" \
              --arg title "$title" \
              --arg repo "$REPO_NAME" \
              --arg commit "$COMMIT_HASH" \
              --arg time "$DEPLOY_TIME" \
              --arg additional "$additional" \
              --arg timestamp "$timestamp" \
              --argjson color "$color" \
              '{
                embeds: [{
                  author: { name: $name, icon_url: $icon_url },
                  title: $title,
                  color: $color,
                  fields: [
                    { name: "Repository", value: $repo, inline: false },
                    { name: "Commit", value: "[\($commit)](https://github.com/\($repo)/commit/\($commit))", inline: false },
                    { name: "Time", value: "`\($time)`", inline: false },
                    { name: "Additional Info", value: $additional, inline: false }
                  ],
                  timestamp: $timestamp,
                  footer: { text: "Deployment System" }
                }]
              }')

            echo "HEALTHCHECK_FAILED=true" >> $GITHUB_ENV
            # Send the notification to Discord
            curl -H "Content-Type: application/json" -d "$payload" "$DISCORD_WEBHOOK_URL"
          else
            echo "Healthcheck passed."
            
            # Define notification details for healthcheck passed
            title="Healthcheck Passed"
            color=3066993  # Green color
            additional="Healthcheck response from the backend: \`$response_last_line\`"
            timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

            # Create JSON payload using jq
            payload=$(jq -n \
              --arg name "$ACTOR" \
              --arg icon_url "$ACTOR_AVATAR_URL" \
              --arg title "$title" \
              --arg repo "$REPO_NAME" \
              --arg commit "$COMMIT_HASH" \
              --arg time "$DEPLOY_TIME" \
              --arg additional "$additional" \
              --arg timestamp "$timestamp" \
              --argjson color "$color" \
              '{
                embeds: [{
                  author: { name: $name, icon_url: $icon_url },
                  title: $title,
                  color: $color,
                  fields: [
                    { name: "Repository", value: $repo, inline: false },
                    { name: "Commit", value: "[\($commit)](https://github.com/\($repo)/commit/\($commit))", inline: false },
                    { name: "Time", value: "`\($time)`", inline: false },
                    { name: "Additional Info", value: $additional, inline: false }
                  ],
                  timestamp: $timestamp,
                  footer: { text: "Deployment System" }
                }]
              }')

            echo "HEALTHCHECK_FAILED=false" >> $GITHUB_ENV
            # Send the notification to Discord
            curl -H "Content-Type: application/json" -d "$payload" "$DISCORD_WEBHOOK_URL"
          fi

      - name: Rollback Deployment
        if: env.HEALTHCHECK_FAILED == 'true'
        env:
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_IP: ${{ secrets.VPS_IP }}
          VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          REPO_NAME: ${{ env.REPO_NAME }}
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
          DEPLOY_TIME: ${{ env.DEPLOY_TIME }}
          ACTOR: ${{ env.ACTOR }}
          ACTOR_AVATAR_URL: ${{ env.ACTOR_AVATAR_URL }}
        run: |
          sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no "$VPS_USER@$VPS_IP" 'bash -s' <<EOF
            # Read previous commit hash
            export PREV_COMMIT_HASH=\$(cat /root/capstone-new/previous_commit.txt)

            export SFCM_FE_ENV="$SFCM_FE_ENV"
            export SFCM_NEW_BE_ENV="$SFCM_NEW_BE_ENV"
            export DISCORD_WEBHOOK_URL="$DISCORD_WEBHOOK_URL"
            export REPO_NAME="$REPO_NAME"
            export COMMIT_HASH="$COMMIT_HASH"
            export DEPLOY_TIME="$DEPLOY_TIME"
            export ACTOR="$ACTOR"
            export ACTOR_AVATAR_URL="$ACTOR_AVATAR_URL"

            if [ -z "\$PREV_COMMIT_HASH" ]; then
              echo "No previous commit hash found. Cannot rollback."
              exit 1
            fi
            # Call the rollback function in deploy.sh
            /root/capstone-new/SFCM_FE/deployment/deploy.sh rollback
            exit 1
          EOF
